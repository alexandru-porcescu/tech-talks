// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  speaker: (where?: SpeakerWhereInput) => Promise<boolean>;
  talk: (where?: TalkWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventPromise;
  events: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Event>;
  eventsConnection: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EventConnectionPromise;
  organization: (where: OrganizationWhereUniqueInput) => OrganizationPromise;
  organizations: (
    args?: {
      where?: OrganizationWhereInput;
      orderBy?: OrganizationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Organization>;
  organizationsConnection: (
    args?: {
      where?: OrganizationWhereInput;
      orderBy?: OrganizationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrganizationConnectionPromise;
  speaker: (where: SpeakerWhereUniqueInput) => SpeakerPromise;
  speakers: (
    args?: {
      where?: SpeakerWhereInput;
      orderBy?: SpeakerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Speaker>;
  speakersConnection: (
    args?: {
      where?: SpeakerWhereInput;
      orderBy?: SpeakerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SpeakerConnectionPromise;
  talk: (where: TalkWhereUniqueInput) => TalkPromise;
  talks: (
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Talk>;
  talksConnection: (
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TalkConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (
    args: { data: EventUpdateInput; where: EventWhereUniqueInput }
  ) => EventPromise;
  updateManyEvents: (
    args: { data: EventUpdateManyMutationInput; where?: EventWhereInput }
  ) => BatchPayloadPromise;
  upsertEvent: (
    args: {
      where: EventWhereUniqueInput;
      create: EventCreateInput;
      update: EventUpdateInput;
    }
  ) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (
    args: { data: OrganizationUpdateInput; where: OrganizationWhereUniqueInput }
  ) => OrganizationPromise;
  updateManyOrganizations: (
    args: {
      data: OrganizationUpdateManyMutationInput;
      where?: OrganizationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOrganization: (
    args: {
      where: OrganizationWhereUniqueInput;
      create: OrganizationCreateInput;
      update: OrganizationUpdateInput;
    }
  ) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createSpeaker: (data: SpeakerCreateInput) => SpeakerPromise;
  updateSpeaker: (
    args: { data: SpeakerUpdateInput; where: SpeakerWhereUniqueInput }
  ) => SpeakerPromise;
  updateManySpeakers: (
    args: { data: SpeakerUpdateManyMutationInput; where?: SpeakerWhereInput }
  ) => BatchPayloadPromise;
  upsertSpeaker: (
    args: {
      where: SpeakerWhereUniqueInput;
      create: SpeakerCreateInput;
      update: SpeakerUpdateInput;
    }
  ) => SpeakerPromise;
  deleteSpeaker: (where: SpeakerWhereUniqueInput) => SpeakerPromise;
  deleteManySpeakers: (where?: SpeakerWhereInput) => BatchPayloadPromise;
  createTalk: (data: TalkCreateInput) => TalkPromise;
  updateTalk: (
    args: { data: TalkUpdateInput; where: TalkWhereUniqueInput }
  ) => TalkPromise;
  updateManyTalks: (
    args: { data: TalkUpdateManyMutationInput; where?: TalkWhereInput }
  ) => BatchPayloadPromise;
  upsertTalk: (
    args: {
      where: TalkWhereUniqueInput;
      create: TalkCreateInput;
      update: TalkUpdateInput;
    }
  ) => TalkPromise;
  deleteTalk: (where: TalkWhereUniqueInput) => TalkPromise;
  deleteManyTalks: (where?: TalkWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  speaker: (
    where?: SpeakerSubscriptionWhereInput
  ) => SpeakerSubscriptionPayloadSubscription;
  talk: (
    where?: TalkSubscriptionWhereInput
  ) => TalkSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type VideoSource = "YOUTUBE" | "VIMEO";

export type EventType = "MEETUP" | "CONFERENCE";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "city_ASC"
  | "city_DESC"
  | "country_ASC"
  | "country_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "name_ASC"
  | "name_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "type_ASC"
  | "type_DESC"
  | "youtubePlaylist_ASC"
  | "youtubePlaylist_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SpeakerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "twitterHandle_ASC"
  | "twitterHandle_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TalkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "hidden_ASC"
  | "hidden_DESC"
  | "private_ASC"
  | "private_DESC"
  | "publishedAt_ASC"
  | "publishedAt_DESC"
  | "source_ASC"
  | "source_DESC"
  | "title_ASC"
  | "title_DESC"
  | "thumbnailUrl_ASC"
  | "thumbnailUrl_DESC"
  | "videoId_ASC"
  | "videoId_DESC"
  | "viewCount_ASC"
  | "viewCount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "twitterHandle_ASC"
  | "twitterHandle_DESC"
  | "website_ASC"
  | "website_DESC"
  | "youtubeChannel_ASC"
  | "youtubeChannel_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  organization?: OrganizationWhereInput;
  speakers_every?: SpeakerWhereInput;
  speakers_some?: SpeakerWhereInput;
  speakers_none?: SpeakerWhereInput;
  talks_every?: TalkWhereInput;
  talks_some?: TalkWhereInput;
  talks_none?: TalkWhereInput;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  endDate?: String;
  endDate_not?: String;
  endDate_in?: String[] | String;
  endDate_not_in?: String[] | String;
  endDate_lt?: String;
  endDate_lte?: String;
  endDate_gt?: String;
  endDate_gte?: String;
  endDate_contains?: String;
  endDate_not_contains?: String;
  endDate_starts_with?: String;
  endDate_not_starts_with?: String;
  endDate_ends_with?: String;
  endDate_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  startDate?: String;
  startDate_not?: String;
  startDate_in?: String[] | String;
  startDate_not_in?: String[] | String;
  startDate_lt?: String;
  startDate_lte?: String;
  startDate_gt?: String;
  startDate_gte?: String;
  startDate_contains?: String;
  startDate_not_contains?: String;
  startDate_starts_with?: String;
  startDate_not_starts_with?: String;
  startDate_ends_with?: String;
  startDate_not_ends_with?: String;
  type?: EventType;
  type_not?: EventType;
  type_in?: EventType[] | EventType;
  type_not_in?: EventType[] | EventType;
  youtubePlaylist?: String;
  youtubePlaylist_not?: String;
  youtubePlaylist_in?: String[] | String;
  youtubePlaylist_not_in?: String[] | String;
  youtubePlaylist_lt?: String;
  youtubePlaylist_lte?: String;
  youtubePlaylist_gt?: String;
  youtubePlaylist_gte?: String;
  youtubePlaylist_contains?: String;
  youtubePlaylist_not_contains?: String;
  youtubePlaylist_starts_with?: String;
  youtubePlaylist_not_starts_with?: String;
  youtubePlaylist_ends_with?: String;
  youtubePlaylist_not_ends_with?: String;
  AND?: EventWhereInput[] | EventWhereInput;
  OR?: EventWhereInput[] | EventWhereInput;
  NOT?: EventWhereInput[] | EventWhereInput;
}

export interface OrganizationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  twitterHandle?: String;
  twitterHandle_not?: String;
  twitterHandle_in?: String[] | String;
  twitterHandle_not_in?: String[] | String;
  twitterHandle_lt?: String;
  twitterHandle_lte?: String;
  twitterHandle_gt?: String;
  twitterHandle_gte?: String;
  twitterHandle_contains?: String;
  twitterHandle_not_contains?: String;
  twitterHandle_starts_with?: String;
  twitterHandle_not_starts_with?: String;
  twitterHandle_ends_with?: String;
  twitterHandle_not_ends_with?: String;
  website?: String;
  website_not?: String;
  website_in?: String[] | String;
  website_not_in?: String[] | String;
  website_lt?: String;
  website_lte?: String;
  website_gt?: String;
  website_gte?: String;
  website_contains?: String;
  website_not_contains?: String;
  website_starts_with?: String;
  website_not_starts_with?: String;
  website_ends_with?: String;
  website_not_ends_with?: String;
  youtubeChannel?: String;
  youtubeChannel_not?: String;
  youtubeChannel_in?: String[] | String;
  youtubeChannel_not_in?: String[] | String;
  youtubeChannel_lt?: String;
  youtubeChannel_lte?: String;
  youtubeChannel_gt?: String;
  youtubeChannel_gte?: String;
  youtubeChannel_contains?: String;
  youtubeChannel_not_contains?: String;
  youtubeChannel_starts_with?: String;
  youtubeChannel_not_starts_with?: String;
  youtubeChannel_ends_with?: String;
  youtubeChannel_not_ends_with?: String;
  AND?: OrganizationWhereInput[] | OrganizationWhereInput;
  OR?: OrganizationWhereInput[] | OrganizationWhereInput;
  NOT?: OrganizationWhereInput[] | OrganizationWhereInput;
}

export interface SpeakerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  talks_every?: TalkWhereInput;
  talks_some?: TalkWhereInput;
  talks_none?: TalkWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  twitterHandle?: String;
  twitterHandle_not?: String;
  twitterHandle_in?: String[] | String;
  twitterHandle_not_in?: String[] | String;
  twitterHandle_lt?: String;
  twitterHandle_lte?: String;
  twitterHandle_gt?: String;
  twitterHandle_gte?: String;
  twitterHandle_contains?: String;
  twitterHandle_not_contains?: String;
  twitterHandle_starts_with?: String;
  twitterHandle_not_starts_with?: String;
  twitterHandle_ends_with?: String;
  twitterHandle_not_ends_with?: String;
  AND?: SpeakerWhereInput[] | SpeakerWhereInput;
  OR?: SpeakerWhereInput[] | SpeakerWhereInput;
  NOT?: SpeakerWhereInput[] | SpeakerWhereInput;
}

export interface TalkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  event?: EventWhereInput;
  speakers_every?: SpeakerWhereInput;
  speakers_some?: SpeakerWhereInput;
  speakers_none?: SpeakerWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  duration?: Int;
  duration_not?: Int;
  duration_in?: Int[] | Int;
  duration_not_in?: Int[] | Int;
  duration_lt?: Int;
  duration_lte?: Int;
  duration_gt?: Int;
  duration_gte?: Int;
  hidden?: Boolean;
  hidden_not?: Boolean;
  private?: Boolean;
  private_not?: Boolean;
  publishedAt?: DateTimeInput;
  publishedAt_not?: DateTimeInput;
  publishedAt_in?: DateTimeInput[] | DateTimeInput;
  publishedAt_not_in?: DateTimeInput[] | DateTimeInput;
  publishedAt_lt?: DateTimeInput;
  publishedAt_lte?: DateTimeInput;
  publishedAt_gt?: DateTimeInput;
  publishedAt_gte?: DateTimeInput;
  source?: VideoSource;
  source_not?: VideoSource;
  source_in?: VideoSource[] | VideoSource;
  source_not_in?: VideoSource[] | VideoSource;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  thumbnailUrl?: String;
  thumbnailUrl_not?: String;
  thumbnailUrl_in?: String[] | String;
  thumbnailUrl_not_in?: String[] | String;
  thumbnailUrl_lt?: String;
  thumbnailUrl_lte?: String;
  thumbnailUrl_gt?: String;
  thumbnailUrl_gte?: String;
  thumbnailUrl_contains?: String;
  thumbnailUrl_not_contains?: String;
  thumbnailUrl_starts_with?: String;
  thumbnailUrl_not_starts_with?: String;
  thumbnailUrl_ends_with?: String;
  thumbnailUrl_not_ends_with?: String;
  videoId?: String;
  videoId_not?: String;
  videoId_in?: String[] | String;
  videoId_not_in?: String[] | String;
  videoId_lt?: String;
  videoId_lte?: String;
  videoId_gt?: String;
  videoId_gte?: String;
  videoId_contains?: String;
  videoId_not_contains?: String;
  videoId_starts_with?: String;
  videoId_not_starts_with?: String;
  videoId_ends_with?: String;
  videoId_not_ends_with?: String;
  viewCount?: Int;
  viewCount_not?: Int;
  viewCount_in?: Int[] | Int;
  viewCount_not_in?: Int[] | Int;
  viewCount_lt?: Int;
  viewCount_lte?: Int;
  viewCount_gt?: Int;
  viewCount_gte?: Int;
  AND?: TalkWhereInput[] | TalkWhereInput;
  OR?: TalkWhereInput[] | TalkWhereInput;
  NOT?: TalkWhereInput[] | TalkWhereInput;
}

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type SpeakerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TalkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EventCreateInput {
  organization?: OrganizationCreateOneWithoutEventsInput;
  speakers?: SpeakerCreateManyWithoutEventsInput;
  talks?: TalkCreateManyWithoutEventInput;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface OrganizationCreateOneWithoutEventsInput {
  create?: OrganizationCreateWithoutEventsInput;
  connect?: OrganizationWhereUniqueInput;
}

export interface OrganizationCreateWithoutEventsInput {
  name?: String;
  twitterHandle?: String;
  website?: String;
  youtubeChannel?: String;
}

export interface SpeakerCreateManyWithoutEventsInput {
  create?: SpeakerCreateWithoutEventsInput[] | SpeakerCreateWithoutEventsInput;
  connect?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
}

export interface SpeakerCreateWithoutEventsInput {
  talks?: TalkCreateManyWithoutSpeakersInput;
  name: String;
  twitterHandle?: String;
}

export interface TalkCreateManyWithoutSpeakersInput {
  create?: TalkCreateWithoutSpeakersInput[] | TalkCreateWithoutSpeakersInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
}

export interface TalkCreateWithoutSpeakersInput {
  event?: EventCreateOneWithoutTalksInput;
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeInput;
  source?: VideoSource;
  title: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface EventCreateOneWithoutTalksInput {
  create?: EventCreateWithoutTalksInput;
  connect?: EventWhereUniqueInput;
}

export interface EventCreateWithoutTalksInput {
  organization?: OrganizationCreateOneWithoutEventsInput;
  speakers?: SpeakerCreateManyWithoutEventsInput;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface TalkCreateManyWithoutEventInput {
  create?: TalkCreateWithoutEventInput[] | TalkCreateWithoutEventInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
}

export interface TalkCreateWithoutEventInput {
  speakers?: SpeakerCreateManyWithoutTalksInput;
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeInput;
  source?: VideoSource;
  title: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface SpeakerCreateManyWithoutTalksInput {
  create?: SpeakerCreateWithoutTalksInput[] | SpeakerCreateWithoutTalksInput;
  connect?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
}

export interface SpeakerCreateWithoutTalksInput {
  events?: EventCreateManyWithoutSpeakersInput;
  name: String;
  twitterHandle?: String;
}

export interface EventCreateManyWithoutSpeakersInput {
  create?: EventCreateWithoutSpeakersInput[] | EventCreateWithoutSpeakersInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface EventCreateWithoutSpeakersInput {
  organization?: OrganizationCreateOneWithoutEventsInput;
  talks?: TalkCreateManyWithoutEventInput;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface EventUpdateInput {
  organization?: OrganizationUpdateOneWithoutEventsInput;
  speakers?: SpeakerUpdateManyWithoutEventsInput;
  talks?: TalkUpdateManyWithoutEventInput;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface OrganizationUpdateOneWithoutEventsInput {
  create?: OrganizationCreateWithoutEventsInput;
  update?: OrganizationUpdateWithoutEventsDataInput;
  upsert?: OrganizationUpsertWithoutEventsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: OrganizationWhereUniqueInput;
}

export interface OrganizationUpdateWithoutEventsDataInput {
  name?: String;
  twitterHandle?: String;
  website?: String;
  youtubeChannel?: String;
}

export interface OrganizationUpsertWithoutEventsInput {
  update: OrganizationUpdateWithoutEventsDataInput;
  create: OrganizationCreateWithoutEventsInput;
}

export interface SpeakerUpdateManyWithoutEventsInput {
  create?: SpeakerCreateWithoutEventsInput[] | SpeakerCreateWithoutEventsInput;
  delete?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
  connect?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
  set?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
  disconnect?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
  update?:
    | SpeakerUpdateWithWhereUniqueWithoutEventsInput[]
    | SpeakerUpdateWithWhereUniqueWithoutEventsInput;
  upsert?:
    | SpeakerUpsertWithWhereUniqueWithoutEventsInput[]
    | SpeakerUpsertWithWhereUniqueWithoutEventsInput;
  deleteMany?: SpeakerScalarWhereInput[] | SpeakerScalarWhereInput;
  updateMany?:
    | SpeakerUpdateManyWithWhereNestedInput[]
    | SpeakerUpdateManyWithWhereNestedInput;
}

export interface SpeakerUpdateWithWhereUniqueWithoutEventsInput {
  where: SpeakerWhereUniqueInput;
  data: SpeakerUpdateWithoutEventsDataInput;
}

export interface SpeakerUpdateWithoutEventsDataInput {
  talks?: TalkUpdateManyWithoutSpeakersInput;
  name?: String;
  twitterHandle?: String;
}

export interface TalkUpdateManyWithoutSpeakersInput {
  create?: TalkCreateWithoutSpeakersInput[] | TalkCreateWithoutSpeakersInput;
  delete?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  set?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  disconnect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  update?:
    | TalkUpdateWithWhereUniqueWithoutSpeakersInput[]
    | TalkUpdateWithWhereUniqueWithoutSpeakersInput;
  upsert?:
    | TalkUpsertWithWhereUniqueWithoutSpeakersInput[]
    | TalkUpsertWithWhereUniqueWithoutSpeakersInput;
  deleteMany?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  updateMany?:
    | TalkUpdateManyWithWhereNestedInput[]
    | TalkUpdateManyWithWhereNestedInput;
}

export interface TalkUpdateWithWhereUniqueWithoutSpeakersInput {
  where: TalkWhereUniqueInput;
  data: TalkUpdateWithoutSpeakersDataInput;
}

export interface TalkUpdateWithoutSpeakersDataInput {
  event?: EventUpdateOneWithoutTalksInput;
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeInput;
  source?: VideoSource;
  title?: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface EventUpdateOneWithoutTalksInput {
  create?: EventCreateWithoutTalksInput;
  update?: EventUpdateWithoutTalksDataInput;
  upsert?: EventUpsertWithoutTalksInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: EventWhereUniqueInput;
}

export interface EventUpdateWithoutTalksDataInput {
  organization?: OrganizationUpdateOneWithoutEventsInput;
  speakers?: SpeakerUpdateManyWithoutEventsInput;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface EventUpsertWithoutTalksInput {
  update: EventUpdateWithoutTalksDataInput;
  create: EventCreateWithoutTalksInput;
}

export interface TalkUpsertWithWhereUniqueWithoutSpeakersInput {
  where: TalkWhereUniqueInput;
  update: TalkUpdateWithoutSpeakersDataInput;
  create: TalkCreateWithoutSpeakersInput;
}

export interface TalkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  duration?: Int;
  duration_not?: Int;
  duration_in?: Int[] | Int;
  duration_not_in?: Int[] | Int;
  duration_lt?: Int;
  duration_lte?: Int;
  duration_gt?: Int;
  duration_gte?: Int;
  hidden?: Boolean;
  hidden_not?: Boolean;
  private?: Boolean;
  private_not?: Boolean;
  publishedAt?: DateTimeInput;
  publishedAt_not?: DateTimeInput;
  publishedAt_in?: DateTimeInput[] | DateTimeInput;
  publishedAt_not_in?: DateTimeInput[] | DateTimeInput;
  publishedAt_lt?: DateTimeInput;
  publishedAt_lte?: DateTimeInput;
  publishedAt_gt?: DateTimeInput;
  publishedAt_gte?: DateTimeInput;
  source?: VideoSource;
  source_not?: VideoSource;
  source_in?: VideoSource[] | VideoSource;
  source_not_in?: VideoSource[] | VideoSource;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  thumbnailUrl?: String;
  thumbnailUrl_not?: String;
  thumbnailUrl_in?: String[] | String;
  thumbnailUrl_not_in?: String[] | String;
  thumbnailUrl_lt?: String;
  thumbnailUrl_lte?: String;
  thumbnailUrl_gt?: String;
  thumbnailUrl_gte?: String;
  thumbnailUrl_contains?: String;
  thumbnailUrl_not_contains?: String;
  thumbnailUrl_starts_with?: String;
  thumbnailUrl_not_starts_with?: String;
  thumbnailUrl_ends_with?: String;
  thumbnailUrl_not_ends_with?: String;
  videoId?: String;
  videoId_not?: String;
  videoId_in?: String[] | String;
  videoId_not_in?: String[] | String;
  videoId_lt?: String;
  videoId_lte?: String;
  videoId_gt?: String;
  videoId_gte?: String;
  videoId_contains?: String;
  videoId_not_contains?: String;
  videoId_starts_with?: String;
  videoId_not_starts_with?: String;
  videoId_ends_with?: String;
  videoId_not_ends_with?: String;
  viewCount?: Int;
  viewCount_not?: Int;
  viewCount_in?: Int[] | Int;
  viewCount_not_in?: Int[] | Int;
  viewCount_lt?: Int;
  viewCount_lte?: Int;
  viewCount_gt?: Int;
  viewCount_gte?: Int;
  AND?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  OR?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  NOT?: TalkScalarWhereInput[] | TalkScalarWhereInput;
}

export interface TalkUpdateManyWithWhereNestedInput {
  where: TalkScalarWhereInput;
  data: TalkUpdateManyDataInput;
}

export interface TalkUpdateManyDataInput {
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeInput;
  source?: VideoSource;
  title?: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface SpeakerUpsertWithWhereUniqueWithoutEventsInput {
  where: SpeakerWhereUniqueInput;
  update: SpeakerUpdateWithoutEventsDataInput;
  create: SpeakerCreateWithoutEventsInput;
}

export interface SpeakerScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  twitterHandle?: String;
  twitterHandle_not?: String;
  twitterHandle_in?: String[] | String;
  twitterHandle_not_in?: String[] | String;
  twitterHandle_lt?: String;
  twitterHandle_lte?: String;
  twitterHandle_gt?: String;
  twitterHandle_gte?: String;
  twitterHandle_contains?: String;
  twitterHandle_not_contains?: String;
  twitterHandle_starts_with?: String;
  twitterHandle_not_starts_with?: String;
  twitterHandle_ends_with?: String;
  twitterHandle_not_ends_with?: String;
  AND?: SpeakerScalarWhereInput[] | SpeakerScalarWhereInput;
  OR?: SpeakerScalarWhereInput[] | SpeakerScalarWhereInput;
  NOT?: SpeakerScalarWhereInput[] | SpeakerScalarWhereInput;
}

export interface SpeakerUpdateManyWithWhereNestedInput {
  where: SpeakerScalarWhereInput;
  data: SpeakerUpdateManyDataInput;
}

export interface SpeakerUpdateManyDataInput {
  name?: String;
  twitterHandle?: String;
}

export interface TalkUpdateManyWithoutEventInput {
  create?: TalkCreateWithoutEventInput[] | TalkCreateWithoutEventInput;
  delete?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  set?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  disconnect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  update?:
    | TalkUpdateWithWhereUniqueWithoutEventInput[]
    | TalkUpdateWithWhereUniqueWithoutEventInput;
  upsert?:
    | TalkUpsertWithWhereUniqueWithoutEventInput[]
    | TalkUpsertWithWhereUniqueWithoutEventInput;
  deleteMany?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  updateMany?:
    | TalkUpdateManyWithWhereNestedInput[]
    | TalkUpdateManyWithWhereNestedInput;
}

export interface TalkUpdateWithWhereUniqueWithoutEventInput {
  where: TalkWhereUniqueInput;
  data: TalkUpdateWithoutEventDataInput;
}

export interface TalkUpdateWithoutEventDataInput {
  speakers?: SpeakerUpdateManyWithoutTalksInput;
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeInput;
  source?: VideoSource;
  title?: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface SpeakerUpdateManyWithoutTalksInput {
  create?: SpeakerCreateWithoutTalksInput[] | SpeakerCreateWithoutTalksInput;
  delete?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
  connect?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
  set?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
  disconnect?: SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput;
  update?:
    | SpeakerUpdateWithWhereUniqueWithoutTalksInput[]
    | SpeakerUpdateWithWhereUniqueWithoutTalksInput;
  upsert?:
    | SpeakerUpsertWithWhereUniqueWithoutTalksInput[]
    | SpeakerUpsertWithWhereUniqueWithoutTalksInput;
  deleteMany?: SpeakerScalarWhereInput[] | SpeakerScalarWhereInput;
  updateMany?:
    | SpeakerUpdateManyWithWhereNestedInput[]
    | SpeakerUpdateManyWithWhereNestedInput;
}

export interface SpeakerUpdateWithWhereUniqueWithoutTalksInput {
  where: SpeakerWhereUniqueInput;
  data: SpeakerUpdateWithoutTalksDataInput;
}

export interface SpeakerUpdateWithoutTalksDataInput {
  events?: EventUpdateManyWithoutSpeakersInput;
  name?: String;
  twitterHandle?: String;
}

export interface EventUpdateManyWithoutSpeakersInput {
  create?: EventCreateWithoutSpeakersInput[] | EventCreateWithoutSpeakersInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  set?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutSpeakersInput[]
    | EventUpdateWithWhereUniqueWithoutSpeakersInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutSpeakersInput[]
    | EventUpsertWithWhereUniqueWithoutSpeakersInput;
  deleteMany?: EventScalarWhereInput[] | EventScalarWhereInput;
  updateMany?:
    | EventUpdateManyWithWhereNestedInput[]
    | EventUpdateManyWithWhereNestedInput;
}

export interface EventUpdateWithWhereUniqueWithoutSpeakersInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutSpeakersDataInput;
}

export interface EventUpdateWithoutSpeakersDataInput {
  organization?: OrganizationUpdateOneWithoutEventsInput;
  talks?: TalkUpdateManyWithoutEventInput;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface EventUpsertWithWhereUniqueWithoutSpeakersInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutSpeakersDataInput;
  create: EventCreateWithoutSpeakersInput;
}

export interface EventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  endDate?: String;
  endDate_not?: String;
  endDate_in?: String[] | String;
  endDate_not_in?: String[] | String;
  endDate_lt?: String;
  endDate_lte?: String;
  endDate_gt?: String;
  endDate_gte?: String;
  endDate_contains?: String;
  endDate_not_contains?: String;
  endDate_starts_with?: String;
  endDate_not_starts_with?: String;
  endDate_ends_with?: String;
  endDate_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  startDate?: String;
  startDate_not?: String;
  startDate_in?: String[] | String;
  startDate_not_in?: String[] | String;
  startDate_lt?: String;
  startDate_lte?: String;
  startDate_gt?: String;
  startDate_gte?: String;
  startDate_contains?: String;
  startDate_not_contains?: String;
  startDate_starts_with?: String;
  startDate_not_starts_with?: String;
  startDate_ends_with?: String;
  startDate_not_ends_with?: String;
  type?: EventType;
  type_not?: EventType;
  type_in?: EventType[] | EventType;
  type_not_in?: EventType[] | EventType;
  youtubePlaylist?: String;
  youtubePlaylist_not?: String;
  youtubePlaylist_in?: String[] | String;
  youtubePlaylist_not_in?: String[] | String;
  youtubePlaylist_lt?: String;
  youtubePlaylist_lte?: String;
  youtubePlaylist_gt?: String;
  youtubePlaylist_gte?: String;
  youtubePlaylist_contains?: String;
  youtubePlaylist_not_contains?: String;
  youtubePlaylist_starts_with?: String;
  youtubePlaylist_not_starts_with?: String;
  youtubePlaylist_ends_with?: String;
  youtubePlaylist_not_ends_with?: String;
  AND?: EventScalarWhereInput[] | EventScalarWhereInput;
  OR?: EventScalarWhereInput[] | EventScalarWhereInput;
  NOT?: EventScalarWhereInput[] | EventScalarWhereInput;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface SpeakerUpsertWithWhereUniqueWithoutTalksInput {
  where: SpeakerWhereUniqueInput;
  update: SpeakerUpdateWithoutTalksDataInput;
  create: SpeakerCreateWithoutTalksInput;
}

export interface TalkUpsertWithWhereUniqueWithoutEventInput {
  where: TalkWhereUniqueInput;
  update: TalkUpdateWithoutEventDataInput;
  create: TalkCreateWithoutEventInput;
}

export interface EventUpdateManyMutationInput {
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface OrganizationCreateInput {
  events?: EventCreateManyWithoutOrganizationInput;
  name?: String;
  twitterHandle?: String;
  website?: String;
  youtubeChannel?: String;
}

export interface EventCreateManyWithoutOrganizationInput {
  create?:
    | EventCreateWithoutOrganizationInput[]
    | EventCreateWithoutOrganizationInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface EventCreateWithoutOrganizationInput {
  speakers?: SpeakerCreateManyWithoutEventsInput;
  talks?: TalkCreateManyWithoutEventInput;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface OrganizationUpdateInput {
  events?: EventUpdateManyWithoutOrganizationInput;
  name?: String;
  twitterHandle?: String;
  website?: String;
  youtubeChannel?: String;
}

export interface EventUpdateManyWithoutOrganizationInput {
  create?:
    | EventCreateWithoutOrganizationInput[]
    | EventCreateWithoutOrganizationInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  set?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutOrganizationInput[]
    | EventUpdateWithWhereUniqueWithoutOrganizationInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutOrganizationInput[]
    | EventUpsertWithWhereUniqueWithoutOrganizationInput;
  deleteMany?: EventScalarWhereInput[] | EventScalarWhereInput;
  updateMany?:
    | EventUpdateManyWithWhereNestedInput[]
    | EventUpdateManyWithWhereNestedInput;
}

export interface EventUpdateWithWhereUniqueWithoutOrganizationInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutOrganizationDataInput;
}

export interface EventUpdateWithoutOrganizationDataInput {
  speakers?: SpeakerUpdateManyWithoutEventsInput;
  talks?: TalkUpdateManyWithoutEventInput;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface EventUpsertWithWhereUniqueWithoutOrganizationInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutOrganizationDataInput;
  create: EventCreateWithoutOrganizationInput;
}

export interface OrganizationUpdateManyMutationInput {
  name?: String;
  twitterHandle?: String;
  website?: String;
  youtubeChannel?: String;
}

export interface SpeakerCreateInput {
  events?: EventCreateManyWithoutSpeakersInput;
  talks?: TalkCreateManyWithoutSpeakersInput;
  name: String;
  twitterHandle?: String;
}

export interface SpeakerUpdateInput {
  events?: EventUpdateManyWithoutSpeakersInput;
  talks?: TalkUpdateManyWithoutSpeakersInput;
  name?: String;
  twitterHandle?: String;
}

export interface SpeakerUpdateManyMutationInput {
  name?: String;
  twitterHandle?: String;
}

export interface TalkCreateInput {
  event?: EventCreateOneWithoutTalksInput;
  speakers?: SpeakerCreateManyWithoutTalksInput;
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeInput;
  source?: VideoSource;
  title: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface TalkUpdateInput {
  event?: EventUpdateOneWithoutTalksInput;
  speakers?: SpeakerUpdateManyWithoutTalksInput;
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeInput;
  source?: VideoSource;
  title?: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface TalkUpdateManyMutationInput {
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeInput;
  source?: VideoSource;
  title?: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EventWhereInput;
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  NOT?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrganizationWhereInput;
  AND?:
    | OrganizationSubscriptionWhereInput[]
    | OrganizationSubscriptionWhereInput;
  OR?:
    | OrganizationSubscriptionWhereInput[]
    | OrganizationSubscriptionWhereInput;
  NOT?:
    | OrganizationSubscriptionWhereInput[]
    | OrganizationSubscriptionWhereInput;
}

export interface SpeakerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SpeakerWhereInput;
  AND?: SpeakerSubscriptionWhereInput[] | SpeakerSubscriptionWhereInput;
  OR?: SpeakerSubscriptionWhereInput[] | SpeakerSubscriptionWhereInput;
  NOT?: SpeakerSubscriptionWhereInput[] | SpeakerSubscriptionWhereInput;
}

export interface TalkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TalkWhereInput;
  AND?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  OR?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  NOT?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Event {
  id: ID_Output;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  organization: <T = OrganizationPromise>() => T;
  speakers: <T = FragmentableArray<Speaker>>(
    args?: {
      where?: SpeakerWhereInput;
      orderBy?: SpeakerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  talks: <T = FragmentableArray<Talk>>(
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  city: () => Promise<String>;
  country: () => Promise<String>;
  endDate: () => Promise<String>;
  name: () => Promise<String>;
  startDate: () => Promise<String>;
  type: () => Promise<EventType>;
  youtubePlaylist: () => Promise<String>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  organization: <T = OrganizationSubscription>() => T;
  speakers: <T = Promise<AsyncIterator<SpeakerSubscription>>>(
    args?: {
      where?: SpeakerWhereInput;
      orderBy?: SpeakerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  talks: <T = Promise<AsyncIterator<TalkSubscription>>>(
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<EventType>>;
  youtubePlaylist: () => Promise<AsyncIterator<String>>;
}

export interface Organization {
  id: ID_Output;
  name?: String;
  twitterHandle?: String;
  website?: String;
  youtubeChannel?: String;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  events: <T = FragmentableArray<Event>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<String>;
  twitterHandle: () => Promise<String>;
  website: () => Promise<String>;
  youtubeChannel: () => Promise<String>;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<AsyncIterator<String>>;
  twitterHandle: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  youtubeChannel: () => Promise<AsyncIterator<String>>;
}

export interface Speaker {
  id: ID_Output;
  name: String;
  twitterHandle?: String;
}

export interface SpeakerPromise extends Promise<Speaker>, Fragmentable {
  id: () => Promise<ID_Output>;
  events: <T = FragmentableArray<Event>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  talks: <T = FragmentableArray<Talk>>(
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<String>;
  twitterHandle: () => Promise<String>;
}

export interface SpeakerSubscription
  extends Promise<AsyncIterator<Speaker>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  talks: <T = Promise<AsyncIterator<TalkSubscription>>>(
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<AsyncIterator<String>>;
  twitterHandle: () => Promise<AsyncIterator<String>>;
}

export interface Talk {
  id: ID_Output;
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeOutput;
  source?: VideoSource;
  title: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface TalkPromise extends Promise<Talk>, Fragmentable {
  id: () => Promise<ID_Output>;
  event: <T = EventPromise>() => T;
  speakers: <T = FragmentableArray<Speaker>>(
    args?: {
      where?: SpeakerWhereInput;
      orderBy?: SpeakerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<String>;
  duration: () => Promise<Int>;
  hidden: () => Promise<Boolean>;
  private: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  source: () => Promise<VideoSource>;
  title: () => Promise<String>;
  thumbnailUrl: () => Promise<String>;
  videoId: () => Promise<String>;
  viewCount: () => Promise<Int>;
}

export interface TalkSubscription
  extends Promise<AsyncIterator<Talk>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  event: <T = EventSubscription>() => T;
  speakers: <T = Promise<AsyncIterator<SpeakerSubscription>>>(
    args?: {
      where?: SpeakerWhereInput;
      orderBy?: SpeakerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  hidden: () => Promise<AsyncIterator<Boolean>>;
  private: () => Promise<AsyncIterator<Boolean>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  source: () => Promise<AsyncIterator<VideoSource>>;
  title: () => Promise<AsyncIterator<String>>;
  thumbnailUrl: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  viewCount: () => Promise<AsyncIterator<Int>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpeakerConnection {
  pageInfo: PageInfo;
  edges: SpeakerEdge[];
}

export interface SpeakerConnectionPromise
  extends Promise<SpeakerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpeakerEdge>>() => T;
  aggregate: <T = AggregateSpeakerPromise>() => T;
}

export interface SpeakerConnectionSubscription
  extends Promise<AsyncIterator<SpeakerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpeakerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpeakerSubscription>() => T;
}

export interface SpeakerEdge {
  node: Speaker;
  cursor: String;
}

export interface SpeakerEdgePromise extends Promise<SpeakerEdge>, Fragmentable {
  node: <T = SpeakerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpeakerEdgeSubscription
  extends Promise<AsyncIterator<SpeakerEdge>>,
    Fragmentable {
  node: <T = SpeakerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSpeaker {
  count: Int;
}

export interface AggregateSpeakerPromise
  extends Promise<AggregateSpeaker>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpeakerSubscription
  extends Promise<AsyncIterator<AggregateSpeaker>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TalkConnection {
  pageInfo: PageInfo;
  edges: TalkEdge[];
}

export interface TalkConnectionPromise
  extends Promise<TalkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TalkEdge>>() => T;
  aggregate: <T = AggregateTalkPromise>() => T;
}

export interface TalkConnectionSubscription
  extends Promise<AsyncIterator<TalkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TalkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTalkSubscription>() => T;
}

export interface TalkEdge {
  node: Talk;
  cursor: String;
}

export interface TalkEdgePromise extends Promise<TalkEdge>, Fragmentable {
  node: <T = TalkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TalkEdgeSubscription
  extends Promise<AsyncIterator<TalkEdge>>,
    Fragmentable {
  node: <T = TalkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTalk {
  count: Int;
}

export interface AggregateTalkPromise
  extends Promise<AggregateTalk>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTalkSubscription
  extends Promise<AsyncIterator<AggregateTalk>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  city?: String;
  country?: String;
  endDate?: String;
  name?: String;
  startDate?: String;
  type?: EventType;
  youtubePlaylist?: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  endDate: () => Promise<String>;
  name: () => Promise<String>;
  startDate: () => Promise<String>;
  type: () => Promise<EventType>;
  youtubePlaylist: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<EventType>>;
  youtubePlaylist: () => Promise<AsyncIterator<String>>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  name?: String;
  twitterHandle?: String;
  website?: String;
  youtubeChannel?: String;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  twitterHandle: () => Promise<String>;
  website: () => Promise<String>;
  youtubeChannel: () => Promise<String>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  twitterHandle: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  youtubeChannel: () => Promise<AsyncIterator<String>>;
}

export interface SpeakerSubscriptionPayload {
  mutation: MutationType;
  node: Speaker;
  updatedFields: String[];
  previousValues: SpeakerPreviousValues;
}

export interface SpeakerSubscriptionPayloadPromise
  extends Promise<SpeakerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpeakerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpeakerPreviousValuesPromise>() => T;
}

export interface SpeakerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpeakerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpeakerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpeakerPreviousValuesSubscription>() => T;
}

export interface SpeakerPreviousValues {
  id: ID_Output;
  name: String;
  twitterHandle?: String;
}

export interface SpeakerPreviousValuesPromise
  extends Promise<SpeakerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  twitterHandle: () => Promise<String>;
}

export interface SpeakerPreviousValuesSubscription
  extends Promise<AsyncIterator<SpeakerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  twitterHandle: () => Promise<AsyncIterator<String>>;
}

export interface TalkSubscriptionPayload {
  mutation: MutationType;
  node: Talk;
  updatedFields: String[];
  previousValues: TalkPreviousValues;
}

export interface TalkSubscriptionPayloadPromise
  extends Promise<TalkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TalkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TalkPreviousValuesPromise>() => T;
}

export interface TalkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TalkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TalkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TalkPreviousValuesSubscription>() => T;
}

export interface TalkPreviousValues {
  id: ID_Output;
  description?: String;
  duration?: Int;
  hidden?: Boolean;
  private?: Boolean;
  publishedAt?: DateTimeOutput;
  source?: VideoSource;
  title: String;
  thumbnailUrl?: String;
  videoId?: String;
  viewCount?: Int;
}

export interface TalkPreviousValuesPromise
  extends Promise<TalkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  duration: () => Promise<Int>;
  hidden: () => Promise<Boolean>;
  private: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  source: () => Promise<VideoSource>;
  title: () => Promise<String>;
  thumbnailUrl: () => Promise<String>;
  videoId: () => Promise<String>;
  viewCount: () => Promise<Int>;
}

export interface TalkPreviousValuesSubscription
  extends Promise<AsyncIterator<TalkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  hidden: () => Promise<AsyncIterator<Boolean>>;
  private: () => Promise<AsyncIterator<Boolean>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  source: () => Promise<AsyncIterator<VideoSource>>;
  title: () => Promise<AsyncIterator<String>>;
  thumbnailUrl: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  viewCount: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Talk",
    embedded: false
  },
  {
    name: "Speaker",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "VideoSource",
    embedded: false
  },
  {
    name: "EventType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
