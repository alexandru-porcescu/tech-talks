// Code generated by Prisma (prisma@1.27.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateEvent {
  count: Int!
}

type AggregateSpeaker {
  count: Int!
}

type AggregateTalk {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Event {
  id: ID!
  type: String
  youtubeChannel: String
  speakers(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Speaker!]
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk!]
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  type: String
  youtubeChannel: String
  speakers: SpeakerCreateManyInput
  talks: TalkCreateManyWithoutEventInput
}

input EventCreateOneWithoutTalksInput {
  create: EventCreateWithoutTalksInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutTalksInput {
  type: String
  youtubeChannel: String
  speakers: SpeakerCreateManyInput
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  youtubeChannel_ASC
  youtubeChannel_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EventPreviousValues {
  id: ID!
  type: String
  youtubeChannel: String
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  type: String
  youtubeChannel: String
  speakers: SpeakerUpdateManyInput
  talks: TalkUpdateManyWithoutEventInput
}

input EventUpdateManyMutationInput {
  type: String
  youtubeChannel: String
}

input EventUpdateOneWithoutTalksInput {
  create: EventCreateWithoutTalksInput
  update: EventUpdateWithoutTalksDataInput
  upsert: EventUpsertWithoutTalksInput
  delete: Boolean
  disconnect: Boolean
  connect: EventWhereUniqueInput
}

input EventUpdateWithoutTalksDataInput {
  type: String
  youtubeChannel: String
  speakers: SpeakerUpdateManyInput
}

input EventUpsertWithoutTalksInput {
  update: EventUpdateWithoutTalksDataInput!
  create: EventCreateWithoutTalksInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  youtubeChannel: String
  youtubeChannel_not: String
  youtubeChannel_in: [String!]
  youtubeChannel_not_in: [String!]
  youtubeChannel_lt: String
  youtubeChannel_lte: String
  youtubeChannel_gt: String
  youtubeChannel_gte: String
  youtubeChannel_contains: String
  youtubeChannel_not_contains: String
  youtubeChannel_starts_with: String
  youtubeChannel_not_starts_with: String
  youtubeChannel_ends_with: String
  youtubeChannel_not_ends_with: String
  speakers_every: SpeakerWhereInput
  speakers_some: SpeakerWhereInput
  speakers_none: SpeakerWhereInput
  talks_every: TalkWhereInput
  talks_some: TalkWhereInput
  talks_none: TalkWhereInput
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createSpeaker(data: SpeakerCreateInput!): Speaker!
  updateSpeaker(data: SpeakerUpdateInput!, where: SpeakerWhereUniqueInput!): Speaker
  updateManySpeakers(data: SpeakerUpdateManyMutationInput!, where: SpeakerWhereInput): BatchPayload!
  upsertSpeaker(where: SpeakerWhereUniqueInput!, create: SpeakerCreateInput!, update: SpeakerUpdateInput!): Speaker!
  deleteSpeaker(where: SpeakerWhereUniqueInput!): Speaker
  deleteManySpeakers(where: SpeakerWhereInput): BatchPayload!
  createTalk(data: TalkCreateInput!): Talk!
  updateTalk(data: TalkUpdateInput!, where: TalkWhereUniqueInput!): Talk
  updateManyTalks(data: TalkUpdateManyMutationInput!, where: TalkWhereInput): BatchPayload!
  upsertTalk(where: TalkWhereUniqueInput!, create: TalkCreateInput!, update: TalkUpdateInput!): Talk!
  deleteTalk(where: TalkWhereUniqueInput!): Talk
  deleteManyTalks(where: TalkWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  speaker(where: SpeakerWhereUniqueInput!): Speaker
  speakers(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Speaker]!
  speakersConnection(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeakerConnection!
  talk(where: TalkWhereUniqueInput!): Talk
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk]!
  talksConnection(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TalkConnection!
  node(id: ID!): Node
}

type Speaker {
  id: ID!
  name: String!
  twitterHandle: String
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk!]
}

type SpeakerConnection {
  pageInfo: PageInfo!
  edges: [SpeakerEdge]!
  aggregate: AggregateSpeaker!
}

input SpeakerCreateInput {
  name: String!
  twitterHandle: String
  talks: TalkCreateManyWithoutSpeakersInput
}

input SpeakerCreateManyInput {
  create: [SpeakerCreateInput!]
  connect: [SpeakerWhereUniqueInput!]
}

input SpeakerCreateManyWithoutTalksInput {
  create: [SpeakerCreateWithoutTalksInput!]
  connect: [SpeakerWhereUniqueInput!]
}

input SpeakerCreateWithoutTalksInput {
  name: String!
  twitterHandle: String
}

type SpeakerEdge {
  node: Speaker!
  cursor: String!
}

enum SpeakerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  twitterHandle_ASC
  twitterHandle_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SpeakerPreviousValues {
  id: ID!
  name: String!
  twitterHandle: String
}

input SpeakerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  twitterHandle: String
  twitterHandle_not: String
  twitterHandle_in: [String!]
  twitterHandle_not_in: [String!]
  twitterHandle_lt: String
  twitterHandle_lte: String
  twitterHandle_gt: String
  twitterHandle_gte: String
  twitterHandle_contains: String
  twitterHandle_not_contains: String
  twitterHandle_starts_with: String
  twitterHandle_not_starts_with: String
  twitterHandle_ends_with: String
  twitterHandle_not_ends_with: String
  AND: [SpeakerScalarWhereInput!]
  OR: [SpeakerScalarWhereInput!]
  NOT: [SpeakerScalarWhereInput!]
}

type SpeakerSubscriptionPayload {
  mutation: MutationType!
  node: Speaker
  updatedFields: [String!]
  previousValues: SpeakerPreviousValues
}

input SpeakerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SpeakerWhereInput
  AND: [SpeakerSubscriptionWhereInput!]
  OR: [SpeakerSubscriptionWhereInput!]
  NOT: [SpeakerSubscriptionWhereInput!]
}

input SpeakerUpdateDataInput {
  name: String
  twitterHandle: String
  talks: TalkUpdateManyWithoutSpeakersInput
}

input SpeakerUpdateInput {
  name: String
  twitterHandle: String
  talks: TalkUpdateManyWithoutSpeakersInput
}

input SpeakerUpdateManyDataInput {
  name: String
  twitterHandle: String
}

input SpeakerUpdateManyInput {
  create: [SpeakerCreateInput!]
  update: [SpeakerUpdateWithWhereUniqueNestedInput!]
  upsert: [SpeakerUpsertWithWhereUniqueNestedInput!]
  delete: [SpeakerWhereUniqueInput!]
  connect: [SpeakerWhereUniqueInput!]
  set: [SpeakerWhereUniqueInput!]
  disconnect: [SpeakerWhereUniqueInput!]
  deleteMany: [SpeakerScalarWhereInput!]
  updateMany: [SpeakerUpdateManyWithWhereNestedInput!]
}

input SpeakerUpdateManyMutationInput {
  name: String
  twitterHandle: String
}

input SpeakerUpdateManyWithoutTalksInput {
  create: [SpeakerCreateWithoutTalksInput!]
  delete: [SpeakerWhereUniqueInput!]
  connect: [SpeakerWhereUniqueInput!]
  set: [SpeakerWhereUniqueInput!]
  disconnect: [SpeakerWhereUniqueInput!]
  update: [SpeakerUpdateWithWhereUniqueWithoutTalksInput!]
  upsert: [SpeakerUpsertWithWhereUniqueWithoutTalksInput!]
  deleteMany: [SpeakerScalarWhereInput!]
  updateMany: [SpeakerUpdateManyWithWhereNestedInput!]
}

input SpeakerUpdateManyWithWhereNestedInput {
  where: SpeakerScalarWhereInput!
  data: SpeakerUpdateManyDataInput!
}

input SpeakerUpdateWithoutTalksDataInput {
  name: String
  twitterHandle: String
}

input SpeakerUpdateWithWhereUniqueNestedInput {
  where: SpeakerWhereUniqueInput!
  data: SpeakerUpdateDataInput!
}

input SpeakerUpdateWithWhereUniqueWithoutTalksInput {
  where: SpeakerWhereUniqueInput!
  data: SpeakerUpdateWithoutTalksDataInput!
}

input SpeakerUpsertWithWhereUniqueNestedInput {
  where: SpeakerWhereUniqueInput!
  update: SpeakerUpdateDataInput!
  create: SpeakerCreateInput!
}

input SpeakerUpsertWithWhereUniqueWithoutTalksInput {
  where: SpeakerWhereUniqueInput!
  update: SpeakerUpdateWithoutTalksDataInput!
  create: SpeakerCreateWithoutTalksInput!
}

input SpeakerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  twitterHandle: String
  twitterHandle_not: String
  twitterHandle_in: [String!]
  twitterHandle_not_in: [String!]
  twitterHandle_lt: String
  twitterHandle_lte: String
  twitterHandle_gt: String
  twitterHandle_gte: String
  twitterHandle_contains: String
  twitterHandle_not_contains: String
  twitterHandle_starts_with: String
  twitterHandle_not_starts_with: String
  twitterHandle_ends_with: String
  twitterHandle_not_ends_with: String
  talks_every: TalkWhereInput
  talks_some: TalkWhereInput
  talks_none: TalkWhereInput
  AND: [SpeakerWhereInput!]
  OR: [SpeakerWhereInput!]
  NOT: [SpeakerWhereInput!]
}

input SpeakerWhereUniqueInput {
  id: ID
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  speaker(where: SpeakerSubscriptionWhereInput): SpeakerSubscriptionPayload
  talk(where: TalkSubscriptionWhereInput): TalkSubscriptionPayload
}

type Talk {
  id: ID!
  title: String!
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  event: Event
  speakers(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Speaker!]
  duration: Int
  publishedAt: DateTime
}

type TalkConnection {
  pageInfo: PageInfo!
  edges: [TalkEdge]!
  aggregate: AggregateTalk!
}

input TalkCreateInput {
  title: String!
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  event: EventCreateOneWithoutTalksInput
  speakers: SpeakerCreateManyWithoutTalksInput
  duration: Int
  publishedAt: DateTime
}

input TalkCreateManyWithoutEventInput {
  create: [TalkCreateWithoutEventInput!]
  connect: [TalkWhereUniqueInput!]
}

input TalkCreateManyWithoutSpeakersInput {
  create: [TalkCreateWithoutSpeakersInput!]
  connect: [TalkWhereUniqueInput!]
}

input TalkCreateWithoutEventInput {
  title: String!
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  speakers: SpeakerCreateManyWithoutTalksInput
  duration: Int
  publishedAt: DateTime
}

input TalkCreateWithoutSpeakersInput {
  title: String!
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  event: EventCreateOneWithoutTalksInput
  duration: Int
  publishedAt: DateTime
}

type TalkEdge {
  node: Talk!
  cursor: String!
}

enum TalkOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  videoLink_ASC
  videoLink_DESC
  source_ASC
  source_DESC
  private_ASC
  private_DESC
  duration_ASC
  duration_DESC
  publishedAt_ASC
  publishedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TalkPreviousValues {
  id: ID!
  title: String!
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  duration: Int
  publishedAt: DateTime
}

input TalkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  videoLink: String
  videoLink_not: String
  videoLink_in: [String!]
  videoLink_not_in: [String!]
  videoLink_lt: String
  videoLink_lte: String
  videoLink_gt: String
  videoLink_gte: String
  videoLink_contains: String
  videoLink_not_contains: String
  videoLink_starts_with: String
  videoLink_not_starts_with: String
  videoLink_ends_with: String
  videoLink_not_ends_with: String
  source: VideoSource
  source_not: VideoSource
  source_in: [VideoSource!]
  source_not_in: [VideoSource!]
  private: Boolean
  private_not: Boolean
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  AND: [TalkScalarWhereInput!]
  OR: [TalkScalarWhereInput!]
  NOT: [TalkScalarWhereInput!]
}

type TalkSubscriptionPayload {
  mutation: MutationType!
  node: Talk
  updatedFields: [String!]
  previousValues: TalkPreviousValues
}

input TalkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TalkWhereInput
  AND: [TalkSubscriptionWhereInput!]
  OR: [TalkSubscriptionWhereInput!]
  NOT: [TalkSubscriptionWhereInput!]
}

input TalkUpdateInput {
  title: String
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  event: EventUpdateOneWithoutTalksInput
  speakers: SpeakerUpdateManyWithoutTalksInput
  duration: Int
  publishedAt: DateTime
}

input TalkUpdateManyDataInput {
  title: String
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  duration: Int
  publishedAt: DateTime
}

input TalkUpdateManyMutationInput {
  title: String
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  duration: Int
  publishedAt: DateTime
}

input TalkUpdateManyWithoutEventInput {
  create: [TalkCreateWithoutEventInput!]
  delete: [TalkWhereUniqueInput!]
  connect: [TalkWhereUniqueInput!]
  set: [TalkWhereUniqueInput!]
  disconnect: [TalkWhereUniqueInput!]
  update: [TalkUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [TalkUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [TalkScalarWhereInput!]
  updateMany: [TalkUpdateManyWithWhereNestedInput!]
}

input TalkUpdateManyWithoutSpeakersInput {
  create: [TalkCreateWithoutSpeakersInput!]
  delete: [TalkWhereUniqueInput!]
  connect: [TalkWhereUniqueInput!]
  set: [TalkWhereUniqueInput!]
  disconnect: [TalkWhereUniqueInput!]
  update: [TalkUpdateWithWhereUniqueWithoutSpeakersInput!]
  upsert: [TalkUpsertWithWhereUniqueWithoutSpeakersInput!]
  deleteMany: [TalkScalarWhereInput!]
  updateMany: [TalkUpdateManyWithWhereNestedInput!]
}

input TalkUpdateManyWithWhereNestedInput {
  where: TalkScalarWhereInput!
  data: TalkUpdateManyDataInput!
}

input TalkUpdateWithoutEventDataInput {
  title: String
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  speakers: SpeakerUpdateManyWithoutTalksInput
  duration: Int
  publishedAt: DateTime
}

input TalkUpdateWithoutSpeakersDataInput {
  title: String
  description: String
  videoLink: String
  source: VideoSource
  private: Boolean
  event: EventUpdateOneWithoutTalksInput
  duration: Int
  publishedAt: DateTime
}

input TalkUpdateWithWhereUniqueWithoutEventInput {
  where: TalkWhereUniqueInput!
  data: TalkUpdateWithoutEventDataInput!
}

input TalkUpdateWithWhereUniqueWithoutSpeakersInput {
  where: TalkWhereUniqueInput!
  data: TalkUpdateWithoutSpeakersDataInput!
}

input TalkUpsertWithWhereUniqueWithoutEventInput {
  where: TalkWhereUniqueInput!
  update: TalkUpdateWithoutEventDataInput!
  create: TalkCreateWithoutEventInput!
}

input TalkUpsertWithWhereUniqueWithoutSpeakersInput {
  where: TalkWhereUniqueInput!
  update: TalkUpdateWithoutSpeakersDataInput!
  create: TalkCreateWithoutSpeakersInput!
}

input TalkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  videoLink: String
  videoLink_not: String
  videoLink_in: [String!]
  videoLink_not_in: [String!]
  videoLink_lt: String
  videoLink_lte: String
  videoLink_gt: String
  videoLink_gte: String
  videoLink_contains: String
  videoLink_not_contains: String
  videoLink_starts_with: String
  videoLink_not_starts_with: String
  videoLink_ends_with: String
  videoLink_not_ends_with: String
  source: VideoSource
  source_not: VideoSource
  source_in: [VideoSource!]
  source_not_in: [VideoSource!]
  private: Boolean
  private_not: Boolean
  event: EventWhereInput
  speakers_every: SpeakerWhereInput
  speakers_some: SpeakerWhereInput
  speakers_none: SpeakerWhereInput
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  AND: [TalkWhereInput!]
  OR: [TalkWhereInput!]
  NOT: [TalkWhereInput!]
}

input TalkWhereUniqueInput {
  id: ID
}

enum VideoSource {
  YOUTUBE
  VIMEO
}
`